//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rtc

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateLayout invokes the rtc.CreateLayout API synchronously
// api document: https://help.aliyun.com/api/rtc/createlayout.html
func (client *Client) CreateLayout(request *CreateLayoutRequest) (response *CreateLayoutResponse, err error) {
	response = CreateCreateLayoutResponse()
	err = client.DoAction(request, response)
	return
}

// CreateLayoutWithChan invokes the rtc.CreateLayout API asynchronously
// api document: https://help.aliyun.com/api/rtc/createlayout.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateLayoutWithChan(request *CreateLayoutRequest) (<-chan *CreateLayoutResponse, <-chan error) {
	responseChan := make(chan *CreateLayoutResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateLayout(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateLayoutWithCallback invokes the rtc.CreateLayout API asynchronously
// api document: https://help.aliyun.com/api/rtc/createlayout.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateLayoutWithCallback(request *CreateLayoutRequest, callback func(response *CreateLayoutResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateLayoutResponse
		var err error
		defer close(result)
		response, err = client.CreateLayout(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateLayoutRequest is the request struct for api CreateLayout
type CreateLayoutRequest struct {
	*requests.RpcRequest
	OwnerId requests.Integer      `position:"Query" name:"OwnerId"`
	AppId   string                `position:"Query" name:"AppId"`
	Layout  *[]CreateLayoutLayout `position:"Query" name:"Layout" type:"Repeated"`
}

type CreateLayoutLayout struct {
	BackgroundColor requests.Integer     `name:"BackgroundColor"`
	CropMode        requests.Integer     `name:"CropMode"`
	AudioMixCount   requests.Integer     `name:"AudioMixCount"`
	Panes           *[]CreateLayoutPanes `name:"Panes" type:"Repeated"`
}

type CreateLayoutPanes struct {
	PaneId    requests.Integer `name:"PaneId"`
	MajorPane requests.Integer `name:"MajorPane"`
	X         requests.Float   `name:"X"`
	Y         requests.Float   `name:"Y"`
	Width     requests.Float   `name:"Width"`
	Height    requests.Float   `name:"Height"`
	ZOrder    requests.Integer `name:"ZOrder"`
}

// CreateLayoutResponse is the response struct for api CreateLayout
type CreateLayoutResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	LayoutId  int64  `json:"LayoutId" xml:"LayoutId"`
}

// CreateCreateLayoutRequest creates a request to invoke CreateLayout API
func CreateCreateLayoutRequest() (request *CreateLayoutRequest) {
	request = &CreateLayoutRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("rtc", "2018-01-11", "CreateLayout", "rtc", "openAPI")
	return
}

// CreateCreateLayoutResponse creates a response to parse from CreateLayout response
func CreateCreateLayoutResponse() (response *CreateLayoutResponse) {
	response = &CreateLayoutResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
