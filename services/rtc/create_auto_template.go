//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rtc

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateAutoTemplate invokes the rtc.CreateAutoTemplate API synchronously
// api document: https://help.aliyun.com/api/rtc/createautotemplate.html
func (client *Client) CreateAutoTemplate(request *CreateAutoTemplateRequest) (response *CreateAutoTemplateResponse, err error) {
	response = CreateCreateAutoTemplateResponse()
	err = client.DoAction(request, response)
	return
}

// CreateAutoTemplateWithChan invokes the rtc.CreateAutoTemplate API asynchronously
// api document: https://help.aliyun.com/api/rtc/createautotemplate.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateAutoTemplateWithChan(request *CreateAutoTemplateRequest) (<-chan *CreateAutoTemplateResponse, <-chan error) {
	responseChan := make(chan *CreateAutoTemplateResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateAutoTemplate(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateAutoTemplateWithCallback invokes the rtc.CreateAutoTemplate API asynchronously
// api document: https://help.aliyun.com/api/rtc/createautotemplate.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateAutoTemplateWithCallback(request *CreateAutoTemplateRequest, callback func(response *CreateAutoTemplateResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateAutoTemplateResponse
		var err error
		defer close(result)
		response, err = client.CreateAutoTemplate(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateAutoTemplateRequest is the request struct for api CreateAutoTemplate
type CreateAutoTemplateRequest struct {
	*requests.RpcRequest
	OwnerId      requests.Integer                  `position:"Query" name:"OwnerId"`
	AppId        string                            `position:"Query" name:"AppId"`
	Callback     string                            `position:"Query" name:"Callback"`
	Condition    string                            `position:"Query" name:"Condition"`
	MediaEncode  requests.Integer                  `position:"Query" name:"MediaEncode"`
	LayoutIds    []requests.Integer                `position:"Query" name:"LayoutIds"`
	RecordConfig *[]CreateAutoTemplateRecordConfig `position:"Query" name:"RecordConfig" type:"Repeated"`
	LiveConfig   *[]CreateAutoTemplateLiveConfig   `position:"Query" name:"LiveConfig" type:"Repeated"`
}

type CreateAutoTemplateRecordConfig struct {
	StorageType string           `name:"StorageType"`
	FileFormat  requests.Integer `name:"FileFormat"`
	OSSEndpoint string           `name:"OSSEndpoint"`
	OSSBucket   string           `name:"OSSBucket"`
	VODTranId   string           `name:"VODTranId"`
}

type CreateAutoTemplateLiveConfig struct {
	Domain     string `name:"Domain"`
	App        string `name:"App"`
	StreamName string `name:"StreamName"`
}

// CreateAutoTemplateResponse is the response struct for api CreateAutoTemplate
type CreateAutoTemplateResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	TemplateId int64  `json:"TemplateId" xml:"TemplateId"`
}

// CreateCreateAutoTemplateRequest creates a request to invoke CreateAutoTemplate API
func CreateCreateAutoTemplateRequest() (request *CreateAutoTemplateRequest) {
	request = &CreateAutoTemplateRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("rtc", "2018-01-11", "CreateAutoTemplate", "rtc", "openAPI")
	return
}

// CreateCreateAutoTemplateResponse creates a response to parse from CreateAutoTemplate response
func CreateCreateAutoTemplateResponse() (response *CreateAutoTemplateResponse) {
	response = &CreateAutoTemplateResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
